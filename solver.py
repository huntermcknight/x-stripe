# Hunter McKnight
# KRCourse 2017

import subprocess

def solve(clauses):
    """
    ([[int]]) -> [str]

    Given a cnf formatted as a numpy array, submit the cnf
    to zchaff and return zchaff's output as a list of strings.

    Modified from David Musicant's original script
    https://github.com/FatTony746/clueReasoner/blob/master/SATSolver.py
    """
    # create a cnf file to pass to zchaff
    maxVar = 0
    for clause in clauses:
        for literal in clause:
            maxVar = max(abs(literal),maxVar)
    out = open('query.cnf','w')
    print('c This DIMACS format CNF file was generated by solver.py', file = out)
    print('c Do not edit.', file = out)
    print('p cnf',maxVar,len(clauses), file = out)
    for clause in clauses:
        for literal in clause:
            print(literal, end = ' ', file = out)
        print('0', file = out)
    out.close();

    # pass the cnf file to zchaff
    process = subprocess.Popen('/usr/local/zchaff64/zchaff query.cnf',stdout=subprocess.PIPE,
                shell=True, universal_newlines=True)
    # if necessary, change the preceding path name to point
    # to zchaff on your machine
    process.wait()
    stdout = process.stdout
    result = stdout.read().split()
    stdout.close()

    return result

def is_sat(result):
    """
    ([str]) -> bool

    Read zchaff output to determine if a puzzle was satisfiable.
    Modified from David Musicant's original script
    https://github.com/FatTony746/clueReasoner/blob/master/SATSolver.py
    """

    words = iter(result)
    try:
        while str(next(words)) != 'RESULT:':
            pass
        answer = str(next(words))
        if answer == 'SAT':
            return True
        elif answer == 'UNSAT':
            return False
        else:
            print("Error: SAT/UNSAT not indicated.")
            return False
    except StopIteration:
            print("Error: Unexpected file end.")
            return False

def get_metrics(result):
    """
    ([str]) -> (int, int, int)

    Read zchaff output and return the Max Decision Level,
    Num. of Decisions, and Added Conflict Clauses.
    """

    level = 0
    decisions = 0
    conflicts = 0

    words = iter(result)
    try:
        while next(words) != 'Level':
            pass
        level = int(next(words))
        while next(words) != 'Decisions':
            pass
        decisions = int(next(words))
        while next(words) != 'Conflict':
            pass
        # we have one more string to get out of the way, 'Clauses'
        next(words)
        conflicts = int(next(words))
    except StopIteration:
            print("Error: Unexpected file end.")

    return (level, decisions, conflicts)
